//  Path More than K
#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> ipair;
class Graph{
    int V;
    list<ipair> * adj;
    bool pathmorethanKutil(int i ,int wt ,vector<bool>& path);
    public :
    Graph(int V);
    void addEdge(int u  ,int v ,int wt);
    bool pathmorethanK(int i ,int wt);
};
 Graph :: Graph (int V)
{
this->V =V;
adj = new list<ipair>[V];
}
void Graph ::  addEdge(int u  ,int v ,int wt)
{
    adj[u].push_back({v,wt});
    adj[v].push_back({u,wt});
}
bool Graph :: pathmorethanKutil(int i ,int wt, vector<bool>& path)
{
    if(wt<=0)
    return true;
    
    list<ipair> :: iterator itr;
    for(itr=adj[i].begin();itr!=adj[i].end();itr++)
    {
        int v = (*itr).first;
        int w = (*itr).second;
        if(path[v]==true)
        continue;
        if(w>=wt)
        return true;
        path[v]=true;
        if(pathmorethanKutil(v,wt-w,path))
        return true;
        path[v]=false;
    }
    return false;
}
bool Graph :: pathmorethanK(int i ,int wt)
{
    vector<bool> path(V,false);
    path[i] = true;
    return pathmorethanKutil(i,wt,path);
}
int main() 
{ 
    // create the graph given in above fugure 
    int V = 9; 
    Graph g(V); 
  
    //  making above shown graph 
    g.addEdge(0, 1, 4); 
    g.addEdge(0, 7, 8); 
    g.addEdge(1, 2, 8); 
    g.addEdge(1, 7, 11); 
    g.addEdge(2, 3, 7); 
    g.addEdge(2, 8, 2); 
    g.addEdge(2, 5, 4); 
    g.addEdge(3, 4, 9); 
    g.addEdge(3, 5, 14); 
    g.addEdge(4, 5, 10); 
    g.addEdge(5, 6, 2); 
    g.addEdge(6, 7, 1); 
    g.addEdge(6, 8, 6); 
    g.addEdge(7, 8, 7); 
  
    int src = 0; 
    int k = 62; 
    g.pathmorethanK(src, k)? cout << "Yes\n" : 
                             cout << "No\n"; 
  
    k = 60; 
    g.pathmorethanK(src, k)? cout << "Yes\n" : 
                             cout << "No\n"; 
  
    return 0; 
} 