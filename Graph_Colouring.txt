//  Graph Colouring Problem
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class Graph{
    int V;
    list<int> *adj;
    public :
    Graph(int V);
    void assign_colours();
    void addEdge(int u ,int v);
};
Graph :: Graph(int V)
{
    this->V =V;
    adj = new list<int>[V];
}
void Graph ::  addEdge(int u ,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}
void Graph :: assign_colours()
{
    // Colour the first vertex
    int result[V];
    result[0]=0;
    
    // Assign other vertexes not coloured
    
    for(int u=1;u<V;u++)
    result[u]=-1;
    
    //  Initially all colours are available
    
    bool  available[V];
    for(int u=0;u<V;u++)
    available[u] = false ;
    
    //  proceed to colour remaining v-1 vertices
    
    for(int u=1;u<V;u++)
    {
        list<int> :: iterator itr;
        for(itr=adj[u].begin();itr!=adj[u].end();itr++)
        {
            if(result[*itr]!=-1)
            {
                available[result[*itr]]=true;
            }
        }
        for(int i=0;i<V;i++)
        {
            if(!available[i])
            {
                result[u]=i;
                break;
            }
        }
         for(itr=adj[u].begin();itr!=adj[u].end();itr++)
        {
            if(result[*itr]!=-1)
            {
                available[result[*itr]]=false;
            }
        }
    }
    set<int> s;
    for (int u = 0; u < V; u++) 
        {
            cout << "Vertex " << u << " --->  Color "<< result[u] << endl; 
            s.insert(result[u]);
        }
        cout<<"\nNumber of colours used :"<<s.size();
}
int main() 
{ 
    Graph g1(5); 
    g1.addEdge(0, 1); 
    g1.addEdge(0, 2); 
    g1.addEdge(1, 2); 
    g1.addEdge(1, 3); 
    g1.addEdge(2, 3); 
    g1.addEdge(3, 4); 
    cout << "Coloring of graph 1 \n"; 
    g1.assign_colours(); 
  
    Graph g2(5); 
    g2.addEdge(0, 1); 
    g2.addEdge(0, 2); 
    g2.addEdge(1, 2); 
    g2.addEdge(1, 4); 
    g2.addEdge(2, 4); 
    g2.addEdge(4, 3); 
    cout << "\nColoring of graph 2 \n"; 
    g2.assign_colours(); 
  
    return 0; 
} 