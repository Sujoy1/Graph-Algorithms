#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class Graph{
    int V;
    list<int> *adj;
    public:
    Graph(int V);
    void addEdge(int v , int w);
    void DFS(int s);
    
};
Graph :: Graph(int V)
    {
        this->V=V;
        adj = new list<int>[V];
    }
void Graph :: addEdge(int v , int w)
    
    {
        //directed graph
        adj[v].push_back(w);
    }
void Graph :: DFS(int s)
    {
     bool  *visited = new bool[V];
     for(int i=0 ; i<V;i++)
     visited[i]=false;
     visited[s]=true;
     stack<int> st;
     st.push(s);
     while(!st.empty())
     {
         int ele = st.top();;
         cout<<ele<<' ';
         st.pop();
         list<int> :: iterator itr;
         for(itr=adj[ele].begin();itr!=adj[ele].end();itr++)
         {
             if(!visited[*itr])
             {
                 visited[*itr]=true;
                 st.push(*itr);
             }
         }
     }
    }    
using namespace std;

int main() {
	Graph g(4);
	g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);
 
    cout << "Following is Breadth First Traversal "
         << "(starting from vertex 2) \n";
    g.DFS(0);
	return 0;
}
