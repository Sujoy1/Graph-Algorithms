#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define V 6		//No of vertices'
int minimum_vertex(vector<int> value, vector<bool> processed)
{
  int minimum  = INT_MAX;
    int vertex ;
    for(int i=0;i<V;i++)
    {
        if(processed[i]==false && value[i]<minimum)
        {
           vertex = i;
            minimum = value[i];
        }
    }
    return vertex;
    
}
void dijkstra(int graph[V][V],int s){
    vector<int> value(V,INT_MIN);
    value[s]=0;
    for(int i=0;i<V;i++)
    {
    for(int j=0;j<V;j++)
    {
        graph[i][j] = -graph[i][j];
    }    
    }
    vector<bool> processed(V,false);
    vector<int> parent(V,-1);
    for(int i = 0 ;i<V-1;i++ )
    {
      int  selected = minimum_vertex(value,processed);
        processed[selected]=true;
        for(int j =0 ;j<V;j++)
        {
            if(graph[selected][j]!=0&&value[selected]!=INT_MIN&&processed[j]==false&&(value[selected]+graph[selected][j]>value[j]))
            {
                value[j] = value[selected]+graph[selected][j];
                parent[j] = selected;
            }
        }
    }
     for(int i = 0 ;i<V;i++ )
    {
      cout<<value[i]<<' ';
    }
    
}
int main()
{
    int s=1;
	int graph[V][V] = { {0, 5, 3, 0, 0, 0},
						{0, 0, 2, 6, 0, 0},
						{0, 0, 0, 7, 4, 2},
						{0, 0, 0, -1, 1, 0},
						{0, 0, 0, 0, 0, -2},
						{0, 0, 0, 0, 0, 0} };

	dijkstra(graph,s);	
	return 0;
};