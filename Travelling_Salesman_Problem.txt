// Travelling Salesman Problem
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define V 4
int TSP(int graph[V][V],int S){
    vector<int> vertex;
    int minimum = INT_MAX;
    
    for(int i=0;i<V;i++)
    {
        if(i!=S)
        vertex.push_back(i);
    }
    do{
        int k = S;
        int sum=0;
        for(int i=0;i<vertex.size();i++){
            sum += graph[k][vertex[i]];
            k = vertex[i];
        }
        sum += graph[k][S];
        minimum = min(minimum,sum);
    }while(next_permutation(vertex.begin(),vertex.end()));
    return minimum;
}
int main()
{
    // matrix representation of graph
    int graph[][V] = { { 0, 10, 15, 20 },
                       { 10, 0, 35, 25 },
                       { 15, 35, 0, 30 },
                       { 20, 25, 30, 0 } };
    int s = 0;
    cout << TSP(graph,s) << endl;
    return 0;
}