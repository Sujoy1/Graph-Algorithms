#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class Graph{
    int V;
    list<int> *adj;
    public:
    Graph(int V);
    void addEdge(int u ,int v);
    bool isCycle();
};
 Graph :: Graph(int V)
 {
     this->V=V;
     adj = new list<int>[V];
 }
  void Graph :: addEdge(int u,  int v)
 {
     adj[u].push_back(v);
     adj[v].push_back(u);
 }
 bool  Graph :: isCycle()
 {
     int i;
    vector<int> in_degree(V,0);
    for(i=0;i<V;i++)
    {
        for(auto j : adj[i])
        in_degree[j]++;
    }
    queue<int> q;
    for(i=0;i<V;i++)
    {
        if(in_degree[i]==0)
        q.push(i);
    }
    int count =0;
    while(!q.empty())
    {
        int f = q.front();
        q.pop();
        list<int> :: iterator itr;
        for(itr=adj[f].begin();itr!=adj[f].end();itr++)
        {
            in_degree[*itr]--;
            if(in_degree[*itr]==0)
            {
                q.push(*itr);
            }
        }
        count++;
    }
 //   cout<<count;
    return (count!=V);
 }
int main()
{
    Graph g(6);
    g.addEdge(1,0);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(3, 4);
    g.addEdge(4, 5);
 
    if (g.isCycle())
        cout << "Yes";
    else
        cout << "No";
 
    return 0;
}
