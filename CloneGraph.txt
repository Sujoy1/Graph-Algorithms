/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    
    // traversal function
    
    void dfs(Node* org, Node* clone ,vector<Node *>& visited ){
        visited[clone->val]=clone;
        for( auto ele : org->neighbors)
        {
        if(visited[ele->val]==NULL)
        {
            Node *newnode  = new Node(ele->val);
            (clone->neighbors).push_back(newnode);
            dfs(ele,newnode,visited);
        }
            else
                (clone->neighbors).push_back(visited[ele->val]);
        }
    }
    
    // Clone it Baby !
    
    Node* cloneGraph(Node* curr) {
        if(curr == NULL)
            return curr;
        vector<Node *> visited(1000,NULL);
        Node* copy =  new Node(curr->val);
        visited[copy->val]=copy;
        for( auto ele : curr->neighbors)
        {
        if(visited[ele->val]==NULL)
        {
            Node *newnode  = new Node(ele->val);
            (copy->neighbors).push_back(newnode);
            dfs(ele,newnode,visited);
        }
            else
                (copy->neighbors).push_back(visited[ele->val]);
        }
        return copy;
    }
};