// Splitwise App Algorithm
#include<iostream> 
using namespace std; 
  
// Number of persons (or vertices in the graph) 
#define N 3 
int getMin(int arr[]) 
{ 
    int minInd = 0; 
    for (int i=1; i<N; i++) 
        if (arr[i] < arr[minInd]) 
            minInd = i; 
    return minInd; 
} 
  
// A utility function that returns index of maximum value in arr[] 
int getMax(int arr[]) 
{ 
    int maxInd = 0; 
    for (int i=1; i<N; i++) 
        if (arr[i] > arr[maxInd]) 
            maxInd = i; 
    return maxInd; 
}
void  minCashFlowRec(int amount[])
{
    int mxCredit  = getMax(amount) ;
    int mxDebit  = getMin(amount) ;
    if(mxDebit ==mxCredit)
    return;
    int minu = min(-amount[mxDebit],amount[mxCredit]);
     amount[mxCredit] -= minu;
    amount[mxDebit] += minu;
    cout << "Person " << mxDebit << " pays " << minu 
         << " to " << "Person " << mxCredit << endl; 
    minCashFlowRec(amount);     
}
void minCashFlow(int graph[][N])
{
    int i,j;
    int amount[N]={0};
    for(i=0;i<N;i++)
    {
    for(j=0;j<N;j++)
    {
        amount[i] += graph[j][i] - graph[i][j];
    }    
    }
    minCashFlowRec(amount);
}
int main() 
{ 
    // graph[i][j] indicates the amount that person i needs to 
    // pay person j 
    int graph[N][N] = { {0, 1000, 2000}, 
                        {0, 0, 5000}, 
                        {0, 0, 0},}; 
  
    // Print the solution 
    minCashFlow(graph); 
    return 0; 
}   