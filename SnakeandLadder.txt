// Snake and Ladder Game
#include<iostream> 
#include <queue> 
using namespace std; 
  
struct queueEntry{
    int v;
    int dist;
};
int getMinDiceThrows(int move[],int N){
    bool *visited = new bool[N];
    for(int i=0;i<N;i++)
    visited[i]=false;
    queueEntry a ={0,0};
    visited[0]=true;
    queue<queueEntry> q;
    q.push(a);
    while(!q.empty())
    {
        queueEntry h = q.front();
        if(h.v==N-1)
        return h.dist;
        else
        {
            q.pop();
            for(int j= h.v + 1 ; j<=h.v+6;j++)
            {
                if(!visited[j])
                {
                    queueEntry a  ;
                    a.dist = h.dist + 1;
                    visited[j]=true;
                    if(move[j]!=-1)
                    a.v =move[j];
                    else
                    a.v = j;
                    q.push(a);
                }
            }
        }
        
    }
}
// Driver program to test methods of graph class 
int main() 
{ 
    // Let us construct the board given in above diagram 
    int N = 30; 
    int moves[N]; 
    for (int i = 0; i<N; i++) 
        moves[i] = -1; 
  
    // Ladders 
    moves[2] = 21; 
    moves[4] = 7; 
    moves[10] = 25; 
    moves[19] = 28; 
  
    // Snakes 
    moves[26] = 0; 
    moves[20] = 8; 
    moves[16] = 3; 
    moves[18] = 6; 
  
    cout << "Min Dice throws required is " << getMinDiceThrows(moves, N); 
    return 0; 
} 