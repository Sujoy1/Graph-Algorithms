#include<bits/stdc++.h>
using namespace std;
#define V 5
#define pb push_back

unordered_map<int,vector<int>> adj;

void DFS(int curr , vector<bool>& visited)
{
    visited[curr]=true;
    for(auto itr : adj[curr])
    {
        if(!visited[itr])
        DFS(itr,visited);
    }
}
bool connected_graph()
{
    vector<bool> visited(V+1,false);
    int node =1;
    for(int i = 0;i<V;i++)
    {
        if(adj[i].size()>0)
        {
            node=i;
            break;
        }
    }
    if(node==-1)  // No edges present
    {
        return -1;
    }
    DFS(node,visited);
    for(int i = 0;i<V;i++)
    {
        if(!visited[i]&&adj[i].size()>0)
        {
            return false;
        }
    }
    return true; 
    
}
int find_Euler()
{
    if(!connected_graph())
    return 0;
    int odd = 0 ;
    for(int i=0;i<V;i++)
    {
        if(adj[i].size()&1)
        odd++;
    }
    if(odd>2)
    return 0;
    
    return (odd==0)?2:1;
}
bool findEuler_Path_Cycle()
{
    int f = find_Euler();
    if(f==0)
    cout<<"Not Euler";
    if(f==1)
    cout<<"Semi Euler";
    if(f==0)
    cout<<"Euler";
}
int main()
{
	adj[0].pb(1);
	adj[1].pb(0);
	adj[0].pb(2);
	adj[2].pb(0);
	adj[2].pb(1);
	adj[1].pb(2);
	adj[0].pb(3);
	adj[3].pb(0);
	adj[3].pb(4);
	adj[4].pb(3);
	findEuler_Path_Cycle();

	return 0;
}
