// Finding Articulation points in a graph using Tarjan's Algorithm
#include<bits/stdc++.h>
using namespace std;
#define V 5
#define pb push_back
unordered_map<int,vector<int>> adj;
void DFS(int u,vector<int>& disc,vector<int>& low,vector<int>& parent,vector<bool>& articulation_Point)
{
   static int time  = 0 ;
   disc[u] = low [u]  = time;
   time += 1;
   int children = 0;
   for(int v : adj[u])
   {
       if(disc[v]==-1)
       {
           children += 1;
            parent[v]=u;
            DFS(v,disc,low,parent,articulation_Point);
            low[u]= min( low[u],low[v]);
            
            // Check condition  1 : Rooted Tree with at least two subtrees.....removing root makes G1, G2 disjoint
            
            if(parent[u]==-1&&children>1)
            articulation_Point[u] = true;
            
            // Condintion 2 .....has at least 1 subgraph which doesn't have a backedge 
            
            if(parent[u]!=1&&low[v]>=disc[u])
            articulation_Point[u] = true;
       }
       else if (parent[u]!=v)
       low[u]=min(low[u],disc[v]);
       
   }
}
void findAPs_Tarjan()
{
    vector<int> low(V,-1),disc(V,-1),parent(V,-1);
    vector<bool> articulation_Point(V,false);
    for(int i=0;i<V;i++)
    {
        if(disc[i]==-1)
        DFS(i,disc,low,parent,articulation_Point);
    }
    
    // Printing all articulation Points int the graph
        for(int i=0;i<V;i++)
    {
        if(articulation_Point[i])
        cout<<i<<' ';
     }
    
}
int main()
{
	adj[0].pb(2);
	adj[2].pb(0);
	adj[0].pb(3);
	adj[3].pb(0);
	adj[1].pb(0);
	adj[0].pb(1);
	adj[2].pb(1);
	//adj[2].pb(4);
	//adj[4].pb(2);
	adj[1].pb(2);
	adj[3].pb(4);
	adj[4].pb(3);

	findAPs_Tarjan();
	return 0;
}