#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define N 4
void print(int board[N][N])
{
    for(int i=0;i<N;i++)
    {
    for(int j=0;j<N;j++)
    {
        cout<<board[i][j]<<' ';
    }    
    cout<<endl;
    }
}
// Will check only left hand side since np queen on right side

bool isSafe(int board[N][N],int rows ,int col)
{
    int i,j;
    
    // Check all rows
    
        for( i =0;i<col;i++)
    {
        if(board[rows][i])
        return false;
    }
    
    // Check secondary diagonal
    
    for(i =rows,j=col ; i>=0&&j>=0;i--,j--)
    {
         if(board[i][j])
        return false;
    }
    
      // Check primary diagonal
    
    for(i =rows,j=col ; i<N&&j>=0;i++,j--)
    {
         if(board[i][j])
        return false;
    }
}
bool solveNQutil(int board[N][N],int col){
    if(col>=N)
    return true;
    for(int i=0;i<N;i++)
    {
        if(isSafe(board,i,col)){
            board[i][col]=1;
            if(solveNQutil(board,col+1))
            return true;
            board[i][col]=0;
        }
    }
    return false;
}
void solveNQ(){
    
     int board[N][N] = { { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }};
                        
    if(!solveNQutil(board,0))                    
    cout<<"Solution doesn't exist";
    print(board);
}

int main() {
solveNQ(); 
    return 0;
}