// Prim's Algorithm for minimum product spanning tree on log graph
#include<bits/stdc++.h>
using namespace std;

#define V 5		//No of vertices


int selectmin(vector<int>& value, vector<bool>& setmst)
{
    int minimum = INT_MAX;
     int vertex ;
    for(int i=0;i<V;i++)
    {
        if(!setmst[i]&&value[i]<minimum)
        {
           vertex = i;
            minimum  = value [i];
        }
    }
    return vertex; 
     
}
void findMST(int graph[V][V])
{
	int parent[V];		//Stores MST
	vector<int> value(V,INT_MAX);	//Used for edge relaxation
	vector<bool> setmst(V,false);	//TRUE->Vertex is included in MST

	//Assuming start point as Node-0
	parent[0] = -1;	//Start node has no parent
	value[0] = 0;
	
	//  MST will have V-1 edges
	for(int i=0;i<V-1;i++)
{
    int u = selectmin(value,setmst);
    setmst[u]=true;
    for(int j=0;j<V-1;j++)
{
    if(graph[i][j]!=0&&!setmst[j]&&graph[i][j]<value[j])
    {
        value[j]=graph[i][j];
        parent[j]=i;
    }
}    
}
//Print minimum product ST
int product =1;
	for(int i=1;i<V;++i)
	{
	    product = product * graph[parent[i]][i];
	
		cout<<"U->V: "<<parent[i]<<"->"<<i<<"  wt = "<<graph[parent[i]][i]<<"\n";	
	}
	cout<<"Minimum Product Obtained: "<<product;
}
int main()
{
    int i,j;
int graph[V][V] = {
        { 0, 2, 0, 6, 0 },
        { 2, 0, 3, 8, 5 },
        { 0, 3, 0, 0, 7 },
        { 6, 8, 0, 0, 9 },
        { 0, 5, 7, 9, 0 },
    };
 
for(i=0;i<V;i++)
{
for(j=0;j<V;j++)
{
    if(graph[i][j])
    graph[i][j]=log(graph[i][j]);
}    
}
	findMST(graph);	
	return 0;
}