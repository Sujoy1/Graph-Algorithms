// Finding Bridges in a graph using Tarjan's Algorithm
#include<bits/stdc++.h>
using namespace std;
#define V 5
#define pb push_back
unordered_map<int,vector<int>> adj;
void DFS(int u,vector<int>& disc,vector<int>& low,vector<int>& parent,vector<pair<int,int>>& Bridge)
{
   static int time  = 0 ;
   disc[u] = low [u]  = time;
   time += 1;
   int children = 0;
   for(int v : adj[u])
   {
       if(disc[v]==-1)
       {
           children += 1;
            parent[v]=u;
            DFS(v,disc,low,parent,Bridge);
            low[u]= min( low[u],low[v]);
            
          if(low[v]>disc[u])
          Bridge.pb({u,v});
       }
       else if (parent[u]!=v)
       low[u]=min(low[u],disc[v]);
       
   }
}
void findBridges_Tarjan()
{
    vector<int> low(V,-1),disc(V,-1),parent(V,-1);
    vector<pair<int,int>> Bridge;
    for(int i=0;i<V;i++)
    {
        if(disc[i]==-1)
        DFS(i,disc,low,parent,Bridge);
    }
    
    // Printing all Bridges in  the graph
        for(auto it : Bridge)
    {
            cout<<it.first<<' '<<it.second<<endl;
     }
    
}
int main()
{
    adj[0].pb(2);
	adj[2].pb(0);
	adj[0].pb(3);
	adj[3].pb(0);
	adj[1].pb(0);
	adj[0].pb(1);
	adj[2].pb(1);
	adj[1].pb(2);
	adj[3].pb(4);
	adj[4].pb(3);

	findBridges_Tarjan();
	return 0;
}