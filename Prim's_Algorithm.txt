// Prim's Algorithm for minimum spanning tree
#include<bits/stdc++.h>
using namespace std;

#define V 6		//No of vertices


int selectmin(vector<int>& value, vector<bool>& setmst)
{
    int minimum = INT_MAX;
     int vertex ;
    for(int i=0;i<V;i++)
    {
        if(!setmst[i]&&value[i]<minimum)
        {
           vertex = i;
            minimum  = value [i];
        }
    }
    return vertex; 
     
}
void findMST(int graph[V][V])
{
	int parent[V];		//Stores MST
	vector<int> value(V,INT_MAX);	//Used for edge relaxation
	vector<bool> setmst(V,false);	//TRUE->Vertex is included in MST

	//Assuming start point as Node-0
	parent[0] = -1;	//Start node has no parent
	value[0] = 0;
	
	//  MST will have V-1 edges
	for(int i=0;i<V-1;i++)
{
    int u = selectmin(value,setmst);
    setmst[u]=true;
    for(int j=0;j<V-1;j++)
{
    if(graph[i][j]!=0&&!setmst[j]&&graph[i][j]<value[j])
    {
        value[j]=graph[i][j];
        parent[j]=i;
    }
}    
}
//Print MST
	for(int i=1;i<V;++i)
		cout<<"U->V: "<<parent[i]<<"->"<<i<<"  wt = "<<graph[parent[i]][i]<<"\n";	
}
int main()
{
	int graph[V][V] = { {0, 4, 6, 0, 0, 0},
						{4, 0, 6, 3, 4, 0},
						{6, 6, 0, 1, 8, 0},
						{0, 3, 1, 0, 2, 3},
						{0, 4, 8, 2, 0, 7},
						{0, 0, 0, 3, 7, 0} };

	findMST(graph);	
	return 0;
}